basePath: /
definitions:
  auth.AccessResponse:
    properties:
      access:
        type: string
    type: object
  auth.LoginRequest:
    properties:
      login:
        type: string
      password:
        type: string
    type: object
  response.AppError:
    properties:
      developer_message:
        type: string
      message:
        type: string
      params:
        $ref: '#/definitions/response.Map'
    type: object
  response.Map:
    additionalProperties: true
    type: object
  response.SuccessResponse:
    properties:
      message:
        type: string
      params:
        $ref: '#/definitions/response.Map'
    type: object
  user.CreateUserDTO:
    properties:
      birthday:
        default: "1970-01-01"
        format: date
        type: string
      login:
        default: Ivanov
        type: string
      name:
        default: Иван
        type: string
      password:
        default: password
        format: password
        type: string
      permissions:
        enum:
        - admin
        - read-only
        - banned
        type: string
      surname:
        default: Иванов
        type: string
    type: object
  user.FindUserDTO:
    properties:
      birthday:
        default: "1970-01-01"
        format: date
        type: string
      id:
        type: integer
      login:
        default: Ivanov
        type: string
      name:
        default: Иван
        type: string
      permissions:
        enum:
        - admin
        - read-only
        - banned
        type: string
      surname:
        default: Иванов
        type: string
    type: object
  user.UpdateUserDTO:
    properties:
      birthday:
        default: "1970-01-01"
        format: date
        type: string
      login:
        default: Ivanov
        type: string
      name:
        default: Иван
        type: string
      password:
        default: password
        format: password
        type: string
      permissions:
        enum:
        - admin
        - read-only
        - banned
        type: string
      surname:
        default: Иванов
        type: string
    type: object
  users.CreateUserResponse:
    properties:
      id:
        type: integer
    type: object
  users.FindUsersResponse:
    properties:
      count:
        type: integer
      users:
        items:
          $ref: '#/definitions/user.FindUserDTO'
        type: array
    type: object
host: localhost:8080
info:
  contact: {}
  description: Just solving a test task
  title: Test Project
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: login
      operationId: login
      parameters:
      - description: credentials
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/auth.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.AccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.AppError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.AppError'
        default:
          description: ""
          schema:
            $ref: '#/definitions/response.AppError'
      summary: login
      tags:
      - auth
  /auth/refresh:
    post:
      description: refresh jwt access token
      operationId: refresh
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.AccessResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.AppError'
        default:
          description: ""
          schema:
            $ref: '#/definitions/response.AppError'
      summary: refresh
      tags:
      - auth
  /users:
    get:
      description: get users
      operationId: get users
      parameters:
      - default: 50
        description: limit
        in: query
        name: limit
        type: integer
      - default: asc
        description: order
        enum:
        - asc
        - desc
        in: query
        name: order
        type: string
      - default: ""
        description: name
        in: query
        name: name
        type: string
      - default: ""
        description: surname
        in: query
        name: surname
        type: string
      - default: ""
        description: login
        in: query
        name: login
        type: string
      - default: ""
        description: permissions
        enum:
        - read-only
        - banned
        - admin
        in: query
        name: permissions
        type: string
      - default: ""
        description: birthday
        format: date
        in: query
        name: birthday
        type: string
      - default: 0
        description: offset
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.FindUsersResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.AppError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.AppError'
      security:
      - ApiKeyAuth: []
      summary: get users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: create user
      operationId: create user
      parameters:
      - description: create user info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/user.CreateUserDTO'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/users.CreateUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.AppError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.AppError'
      security:
      - ApiKeyAuth: []
      summary: create user
      tags:
      - users
  /users/{id}:
    delete:
      description: delete user
      operationId: delete user
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.AppError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.AppError'
      security:
      - ApiKeyAuth: []
      summary: delete user
      tags:
      - users
    get:
      description: get user
      operationId: get user
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.FindUserDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.AppError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.AppError'
      security:
      - ApiKeyAuth: []
      summary: get user
      tags:
      - users
    patch:
      consumes:
      - application/json
      description: update user
      operationId: update user
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: integer
      - description: update info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/user.UpdateUserDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.AppError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/response.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.AppError'
      security:
      - ApiKeyAuth: []
      summary: update user
      tags:
      - users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
